print('''
Скрипт, разделяющий таблицу из Haploreg 4.x на подтаблицы и размещающий подтаблицы в отдельные файлы (1 подтаблица - в 1 файл),
а файлы - в отдельные папки (1 папка - 1 хромосома).
Автор: Платон Быкадоров, 2017.
Лицензия: GNU General Public License version 3.
Поддержать проект: https://money.yandex.ru/to/41001832285976

В каком случае пригодится этот скрипт?
Только, если у вас есть набор SNP, для каждого из которых нужно найти снипы,
расположенные не дальше заданного в настройках HaploReg генетического расстояния (LD).

Что содержит т.н. подтаблица?
Каждая подтаблица включает в себя информацио о запросе по очередному SNP из вашего списка,
двухстрочную шапку с заголовками столбцов таблицы, сам запрашиваемый SNP и его характеристики (аннотации),
а также проаннотированный набор SNP, находящихся в окрестностях запрашиваемого SNP.

Получение читаемой скриптом исходной таблицы в HaploReg 4.x (http://archive.broadinstitute.org/mammals/haploreg/haploreg.php):
1. Build Query --> Обзор... --> загружаете список идентификаторов вида rs1234567890, где каждый - на отдельной строке.
2. Set Options --> ставим значение LD threshold, отличное от NA, выбираем другие необходимые для вашей задачи опции; Output mode - HTML.
3. Копируем HTML-вывод без раздела "Query SNP enhancer summary" в Microsoft Excel 365,
а оттуда сохраняем как "Текстовые файлы с разделителями табуляции".

Внимание!
Каждый текстовый либо табличный редактор сохраняет гаплореговские HTML-таблицы в plain text, переформатируя их по-своему.
Этот скрипт способен обрабатывать только таблицы, сохранённые в txt с помощью Excel 365 (желательно, с последними обновлениями).
Если требуется обработать подготовленные другим путём HaploReg-таблицы, пишите в Issues.

Для поиска: HaploReg, SNP, скрипт, биоинформатика, вычислительная генетика.
''')

source_file_path = input('Путь к исходному файлу (не забывать экранировать): ')
skip_query_snp = input('Чтобы *не* записывать в конечные файлы запрашиваемые SNP, введите skip: ')
target_dir_path = input('Путь к папке с конечными chr-подпапками (не забывать экранировать): ')

import os
import re

with open(source_file_path) as source_file_opened:
        source_list = list(source_file_opened)
        query_snp_quantity = len(re.findall('Query SNP', ''.join(source_list)))
        iteration_number = 0
        line_number = 0
        target_subdir_path = None
        
        #Цикл будет выполняться до тех пор, пока количество итераций не станет равно количеству строк, содержащих словосочетание 'Query SNP'.
        while iteration_number < query_snp_quantity:
                
                #В рамках каждой итерации этого цикла создаём новую конечную подтаблицу.
                target_sublist = []

                #Поиск текущего запрашиваемого идентификатора SNP и заданного в настройках HaploReg значения LD threshold (r²).
                #Добавление в конечный список строки с 'QuerySNP'.
                #Увеличение счётчика количества всех строк.
                #Увеличение счётчика количества итераций.
                query_snp = re.search(r'rs\d+', source_list[line_number]).group()
                r2 = re.search(r'\d\.\d', source_list[line_number]).group()
                target_sublist.append(source_list[line_number])
                line_number += 1
                iteration_number += 1

                #3-я строка подтаблицы содержит номер хромосомы, актуальный для всей подтаблицы.
                #Используем этот номер хромосомы для построения названия создаваемой подпапки.
                #Создаём новую "хромосомную" подпапку, если она ещё не существует.
                current_chr_number = re.match(r'\d+', source_list[line_number + 3]).group()
                target_subdir_path = target_dir_path + os.sep + 'chr' + current_chr_number
                if not os.path.exists(target_subdir_path):
                        os.mkdir(target_subdir_path)

                #Цикл, в котором наполняется конечная подтаблица.
                #Строка с 'Query SNP' текущей считываемой подтаблицы в этом цикле участвовать не будет,
                #т.к. при произведённой ранее работе с этой строкой уже увеличился счётчик количества всех строк.
                for line in source_list[line_number:]:

                        #Если пользователю не нужен в конечной подтаблице запращиваемый SNP и его характеристики,
                        #то увеличиваем счётчик количества всех строк и переходим к следующей строке.
                        if skip_query_snp == 'skip':
                                if line.find(query_snp) != -1 and line.find('Query SNP') == -1:
                                        line_number += 1
                                        continue
                                
                        #Добавление строк, содержащих SNP и их характеристики,
                        #а также двухстрочной шапки считываемой подтаблицы, в конечную подтаблицу.
                        #Увеличение счётчика количества всех строк.
                        if re.match(r'\d+', line) != None or line.find('chr\tpos') != -1 or line.find('freq\tfreq') != -1:
                                target_sublist.append(line)
                                line_number += 1

                        #Иногда HaploReg выдаёт строки, где вместо номера хромосомы и координары снипа - 2 табуляции,
                        #а затем идут уже характеристики этого загадочного SNP.
                        #Я такие недоснипы предпочитаю исключать (счётчик количества всех строк при этом увеличивается).
                        #Не согласны - ругайтесь в Issues:).
                        elif re.match(r'\t\t\d', line) != None:
                                line_number += 1
                                continue

                        #Если строка заполнена одними лишь табуляциями, то в конечную подтаблицу её не добавляем.
                        #Двумя такими строками заполнен конец каждой считываемой подтаблицы.
                        #Только увеличиваем счётчик количества всех строк.
                        elif re.match(r'\t\t\t', line) != None:
                                line_number += 1

                        #Встретилась строка с 'QuerySNP' следующей подтаблицы.
                        #Счётчик количества всех строк увеличивать не нужно,
                        #ведь индекс строки со следующим 'QuerySNP' уже достигнут,
                        #и следующая итерация цикла while начнётся с обработки как раз этой строки.
                        #Осуществляем выход из цикла for.
                        else:
                                break
                        
                #Запись конечной подтаблицы в файл.
                target_file = '(' + query_snp + '_' + current_chr_number + ')' + '.txt'
                targetheader = '#' + '(' + query_snp + '_' + 'r2' + '>=' + r2 + '_' + 'chr' + current_chr_number + ')'
                target_file_opened = open(os.path.join(target_dir_path, target_subdir_path, target_file), 'w')
                target_file_opened.write(targetheader + '\n')
                for line in target_sublist:
                        target_file_opened.write(line)
                target_file_opened.close()
