print('''
Этот Python3-скрипт преобразовывает таблицы chr:pos в "формат" BED (chr№    pos - 1    pos    ...).
Автор: Платон Быкадоров, 2018.
Лицензия: GNU General Public License version 3.
Поддержать проект: https://money.yandex.ru/to/41001832285976

Часто в базах данных локализация SNP обозначается номером хромосомы
и лишь одной координатой, разделёнными двоеточием, например, chr14:105706543.
Многие программы, в том числе BedTools, не работают с таким форматом.
Но для решения проблемы не достаточно убрать двоеточие и удвоить координату.
Получаются нулевые координатные интервалы, не принимаемые BedTools и другими инструментами.
Также проблемой для программ будут являться обозначенные только числом номера хромосом, без "приставки" chr.
Т.о., для соблюдения поддерживаемого большинством программ формата
требуется получить таблицу со строками "chr[число]    pos - 1    pos    [другие данные]", т.е. BED.
Согласно полученному в ответ на мой запрос комментарию специалиста команды Galaxy
(https://biostar.usegalaxy.org/p/13027/#13166),
если стартовая и конечная координаты геномного интервала равны друг другу,
то для получения ненулевой дельты следует вычесть 1 из первой координаты.
Компонент скрипта, решающий проблему дельты, базируется исключительно на информации из этого треда.
Если вы считаете этот подход неверным, сообщите, пожалуйста, в Issues.
''')

import os
import re

source_dir = input('Путь к папке с исходными файлами: ')
target_dir = input('Путь к папке с конечными файлами: ')

source_files = os.listdir(source_dir)
for source_file in source_files:
        with open(os.path.join(source_dir, source_file)) as sf_opened:
                target_file = source_file.split('.')[0] + '_' + 'B3' + '.txt'
                with open(os.path.join(target_dir, target_file), 'w') as tf_opened:
                        #В этом скрипте я применил немного необычный для своих работ подход:
                        #строки будут обрабатываться сразу после считывания из файла,
                        #т.е., без предварительного накопления в списке,
                        #а после обработки - прописываться непосредственно в конечный файл.
                        for line in sf_opened:
                                
                                #В строке может оказаться несколько двоеточий.
                                #Нас интересует только то двоеточие, которое расположено между номером хромосомы и координатой,
                                #т.е. между двумя числами.
                                #Получаем пару хромосома:координата, по-отдельности хромосому и 2-ю координату,
                                #а также список, включающий номер хромосомы с приставкой chr и обе координаты.
                                #Если текущая строка не содержит номер хромосомы и координату, то будет считаться хэдером
                                #и сразу прописываться в конечный файл.
                                try:
                                        chrom_col_pos = re.search(r'\d+:\d+', line).group()
                                except AttributeError:
                                        tf_opened.write(line)
                                        continue
                                chrom, pos = re.split(r':', chrom_col_pos)
                                
                                #Если интерпретатор дошёл до этого места, значит, chr:pos-подстрока успешно найдена.
                                #Теперь нужно проверить, есть ли в текущей строке перед номером хромосомы приставка chr.
                                #Если нет, то эта приставка будет добавлена к отделённому ранее номеру хромосомы.
                                if re.search(r'chr\d+:\d+', line) == None:
                                        chrom = 'chr' + chrom
                                chrom_coord_list = [chrom, str(int(pos) - 1), pos]

                                #Замена хромосомно-координатной подстроки с двоеточием на строку вида "chr    pos - 1    pos".
                                #Сохранённая ранее пара хромосома:координата будет служить паттерном (поисковым запросом) в текущей строке,
                                #а список из хромосомы и координат будет объединён в строку,
                                #которая заменит совпадающую с паттерном подстроку.
                                line_with_coord_tab = re.sub(chrom_col_pos, '\t'.join(chrom_coord_list), line)
                                tf_opened.write(line_with_coord_tab)
